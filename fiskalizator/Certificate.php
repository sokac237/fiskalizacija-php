<?php

/**
 * Basic certificate handling.
 * Before calling any methods on object instance, call either $o->loadString() or $o->loadFile()
 */
class Certificate
{

    /** @var array Returned from openssl_pkcs12read */
    private $raw_cert;


    /**
     * @var array Cached certificate data, so we dont have to call X509 repeatedly
     * @see getCertData()
     */
    private $certData;


    /**
     * @param string $filePath
     * @param null|string $pass
     * @return bool
     * @throws Exception If file not found or not readable, or could not open/parse certificate
     */
    public function loadFile($filePath, $pass = null) {

        if (!is_file($filePath)) {
            throw new Exception('File not found.', 123);
        }

        $text = file_get_contents($filePath);
        if ($text === false) {
            throw new Exception('Could not get file contents');
        }

        return $this->loadString($text, $pass);
    }

    /**
     * @param string $certificate
     * @param null|string $pass
     * @return bool
     * @throws Exception If could not open/parse certificate
     */
    public function loadString($certificate, $pass = null) {

        //unset cached certData
        //TODO: think Maybe disable loading of different certificate with some magic
        $this->certData = null;

        openssl_pkcs12_read($certificate, $this->raw_cert, $pass);
        if (!$this->raw_cert) {
            throw new Exception('Could not open certificate!');
        }

        return true;
    }

    /**
     * @return array x509 certificate. Result of "openssl_x509_parse()"
     */
    public function getCertData() {
        if (!$this->certData) {
            $this->certData = openssl_x509_parse($this->raw_cert['cert']);
        }
        return $this->certData;
    }

    public function getPrivateKey() {
        return $this->raw_cert['pkey'];
    }

    public function getX509Cert() {

        /** @var string $pureCert */
        $pureCert = $this->raw_cert['cert'];
        $beginCertText = '-----BEGIN CERTIFICATE-----';
        $endCertText = '-----END CERTIFICATE-----';
        $pureCert = str_replace($beginCertText, '', $pureCert);

        return str_replace($endCertText, '', $pureCert);
    }

    public function getSerialNumber() {
        return $this->getCertData()['serialNumber'];
    }

    public function getIssuer() {
        return $this->getCertData()['issuer'];  
    }

    /**
     * Default formatting is 'C=ZA,ST=Western Cape,L=Cape Town,O=Thawte Consulting cc'
     * Default separator is comma WITHOUT spaces
     * @param string $assignmentString
     * @param string $separator  Glue between valid properties. Defaults to
     * @return string
     */
    public function getIssuerAsString($separator = ',', $assignmentString = '=') {
        $issuer = $this->getIssuer();
        $temp = array();
        foreach ($issuer as $key => $val) {
            $temp[] = $key . $assignmentString . $val;
        }

        return implode($separator, $temp);
    }

    /**
     * @param $string
     * @return mixed
     * @throws Exception If there are problem with signing.
     */
    public function calculateSignature($string) {
        if (!openssl_sign($string, $signature, $this->getPrivateKey(), OPENSSL_ALGO_SHA1)) {
            throw new Exception('Failed to calculate signature');
        }

        return $signature;
    }

    /*
     *
     * TODO: take heed about errors generated by other classes/scrips
     * that may require adding error handling to most of methods,
     * clear buffer at start, and check for errors later
     */
    private function _getOpenSSL_Errors() {
        $out = array();
        while ($e = openssl_error_string()) {
            $out[$e];
        }
        return $out;
    }

}